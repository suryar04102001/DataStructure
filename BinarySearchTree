#include <stdio.h>
#include <stdlib.h>

// Define a structure for a binary tree node
struct BinaryTreeNode {
    int key;
    struct BinaryTreeNode *left, *right;
};

int min(struct BinaryTreeNode *a) {
    while (a->left != NULL) {
        a = a->left;
    }
    return a->key;
}

// Function to create a new node with a given value
struct BinaryTreeNode* newNodeCreate(int value) {
    struct BinaryTreeNode* temp = (struct BinaryTreeNode*)malloc(sizeof(struct BinaryTreeNode));
    temp->key = value;
    temp->left = temp->right = NULL;
    return temp;
}

// Function to search for a node with a specific key in the tree
struct BinaryTreeNode* searchNode(struct BinaryTreeNode* root, int target) {
    if (root == NULL || root->key == target) {
        return root;
    }
    if (root->key < target) {
        return searchNode(root->right, target);
    }
    return searchNode(root->left, target);
}

// Function to insert a node with a specific value in the tree
struct BinaryTreeNode* insertNode(struct BinaryTreeNode* node, int value) {
    if (node == NULL) {
        return newNodeCreate(value);
    }
    if (value < node->key) {
        node->left = insertNode(node->left, value);
    }
    else if (value > node->key) {
        node->right = insertNode(node->right, value);
    }
    return node;
}

struct BinaryTreeNode* deleteNode(struct BinaryTreeNode* root, int value) {
    if (root == NULL) {
        return root;
    }
    if (value < root->key) {
        root->left = deleteNode(root->left, value);
    }
    else if (value > root->key) {
        root->right = deleteNode(root->right, value);
    }
    else {
        if (root->right == NULL) {
            struct BinaryTreeNode* temp = root->left;
            free(root);
            return temp;
        }
        else if (root->left == NULL) {
            struct BinaryTreeNode* temp = root->right;
            free(root);
            return temp;
        }
        root->key = min(root->right);
        root->right = deleteNode(root->right, root->key);
    }
    return root;
}

void inOrder(struct BinaryTreeNode *root) {
    if (root == NULL) {
        return;
    }
    inOrder(root->left);
    printf("%d->", root->key);
    inOrder(root->right);
}

int main() {
    struct BinaryTreeNode *root = newNodeCreate(1);
    for (int i = 2; i < 11; i++) {
        insertNode(root, i);
    }

    printf("In-order traversal before deletion:\n");
    inOrder(root);
    printf("\n");

    root = deleteNode(root, 5);

    printf("In-order traversal after deletion of 5:\n");
    inOrder(root);
    printf("\n");

    return 0;
}
